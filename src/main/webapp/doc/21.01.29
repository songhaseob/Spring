21.01.29

Spring 설정
1. xml - 중점
2. java
3. java + xml
 ** 설정파일을 용도에 따라 여러개로 분리 하는 것도 가능
 
 에러 
 compiler 시점 - 로딩(서버 기동) 시점 - Runtime(실행을 해야만 발생하는 에러)
 
 Spring 타입변환 방법 3가지
 
 propertyEditor
 
 ConversionService
 
 FormattingConversionService
 
 추후 MVC에서 배우는 설정에 의해 명시적으로 등록하지 않아도 fromattingConversionService가 등록됨
 <mvc:annotation-driven/>
 
xml에 값을 표시하는 방법은 문자열 밖에 없음
value="5"

5라고 표시한 값을 java의 문자열 타입으로 해석할지, 숫자 타입으로 해석할지는
해당 class의 필드 타입을 보고 스프링이 결정하게 된다

대다수의 타입은 스프링 프레임워크가 타입을 자동으로 변경하는 것이 가능하나
날짜 타입에 대해서는 국가별, 사용자별 표기 형식이 다르기 때문에 
프레임워크에서 임의로 타입 변환을 하는 것이 불가능하다
(Uservo reg_dt 컬럼)

스프링 프레임 워크에서 타입 변환이 필요한 경우는 크게 두가지

1. 값을 주입할때 (DI)
2. 컨트롤러에서 파라미터를 value 객체에 바인딩 할 때

스프링 프레임 워크에서 커스텀 타입 변환을 등록하는 방법은 크게 3 가지
1. propertyEditor : 문자 <==> 타입 간의 변환
2. conversionService : 타입 <==> 타입 간의 변환
3. formattingConversionService : 타입 <==> 타입 간의 변환

1 ~ 3의 방법을 동시에 적용하는 것은 불가능
2,3의 경우 스프링 빈의 이름을 id="conversionSerivce"로 사용하도록 스프링에서 강제함

1번 : 생략
2번 : 1. 스프링에서 제공하는 ConversionServiceFactoryBean 클래스를 스프링 빈으로 등록
        (위에서 언급한 스프링 빈 이름을 준수해야함)
     2. 해당클래스의 converters 필드에 개발자가 만든 converter를 set으로 주입
         . 개발자가 만드는 converter는 Converter 인터페이스를 구현하여 만든다
         
3번 : 1. 스프링에서 제공하는 FormattingConversionServiceFactoryBean 클래스를 스프링 빈으로 등록
      (위에서 언급한 스프링 빈 이름을 준수해야함)
      2. Value 객체의 필드에 어노테이션 적용 
      
Spring MVC 
-spring container에는 계층 구조를 설정 할 수 있음
 . 자식 컨테이너는 부모 컨테이너의 스프링 빈을 참조 할 수 있음
 . java의 상속과 동일
   - String 객체는 Object객체의 toString,equals 메소드를 사용 할 수 있음
   - 반대로 String 클래스의 length 메소드를 Object 객체 에서는 사용 불가

Spring ioc 컨테이너 계층구조 생성
- DispatcherServlet에 의해 생성되는 컨테이너는 
  ContextLoaderListener에 의해 생성된 컨테이너를 부모로 설정한다      

부모 컨테이너
-service,repository

자식 컨테이너
-하나의 dispatcherServlet생성
-controller

스프링에서 컨트롤러 생성 방법
** 서블릿의 과정과 유사
1. HttpSErvlet 클래스를 상속받은 클래스를 생성
2. url-mapping

Spring
1. @Controller 어노테이션을 적용한 클래스를 생성
2. @RequestMapping 어노테이션을 이용하여 class, method에 적용

** 차이점
서블릿의 경우 calss 단위로 url-mapping이 이루어짐
spring class/method url-mapping이 이루어짐

servlet : userList, user,userRegist, userModify, userDelete : 5개의 서블릿을 생성
spring : 한개로 통합 가능

스프링 컨트롤러 테스트
servlet 환경에서는 servlet 자체를 테스트하기가 굉장히 어려움
servlet 생성/실행하는 주체가 servlet-container 이고
HttpServletRequest, HttpSession등 필요한 객체가 많음

스프링 환경에서는 해당 객체를 쉽게 만들 수 있는 Mock객체를 제공
HttpServletRequest,MockHttpServletResponse, MockHttpSession

==> 손이 많이 간다

spring 프레임워크에서 처리될 요청은 Dispatcher Servlet이 받으므로
Dispatcher Servlet을 대신하여 테스트 할 수 있는 객체를 제공하는 형식으로 컨트롤러 테스트를 진행

DispatcherServlcet ==> MockMvc 
				       WebApplicationContext 객체가 필요
				       ==> 스프링 프레임워크에서 ioc 컨테이너 생성시 자동으로 생성



 
 
 



				 
				 
				 
				 
				                  	    
				   
				 
